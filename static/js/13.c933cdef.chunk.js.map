{"version":3,"sources":["components/uis/FormComponents/DatePicker.js","http/cashbookApi.js","components/pages/Cashbooks.js"],"names":["DatePicker","entry","handleDatePickerChange","selectedDate","name","id","utils","DateFnsUtils","margin","format","value","onChange","getCashbookList","a","http","get","limit","getFilteredCashbooks","startDate","endDate","createCashbook","body","post","mapActionToProps","fetchApi","handleGetCashbookSuccues","res","setCashbookList","Array","isArray","data","map","date","refNo","type","amount","description","getLocalDate","connect","global","classes","useStyles","useState","cashbookList","Date","selectedDateTo","setSelectedDateTo","selectedDateFrom","setSelectedDateFrom","useEffect","then","catch","err","toast","error","handleGetFilteredCashbook","getJSONDate","dateComponent","className","cashbookUi","item","spacing","cashbookDateAlign","label","pageContainer","title","createNewPath","tableData","tableHeaders","getCashbookTableHeaders","handleEdit","hideEditIcon","densed"],"mappings":"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","file":"static/js/13.c933cdef.chunk.js","sourcesContent":["import React from 'react';\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nconst DatePicker = ({ entry, handleDatePickerChange, selectedDate }) => {\n  const { name, id } = entry;\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <KeyboardDatePicker\n        margin='medium'\n        id={id}\n        name={name}\n        format=' yyyy / MM / dd'\n        value={selectedDate}\n        onChange={handleDatePickerChange}\n      />\n    </MuiPickersUtilsProvider>\n  );\n};\n\nexport default DatePicker;\n","import http from './http';\n\nexport async function getCashbookList() {\n  return await http.get('/cashbooks', { limit: 20 });\n}\n\nexport async function getFilteredCashbooks(startDate, endDate) {\n  return await http.get(\n    `/cashbooks?startDate=${startDate}&endDate=${endDate}`,\n    { limit: 20 }\n  );\n}\n\nexport async function getCashbookById(id) {\n  return await http.get(`./cashbooks/${id}`);\n}\n\nexport async function updateCashbookById(id, body) {\n  return await http.put(`./cashbooks/${id}`, body);\n}\n\nexport async function createCashbook(body) {\n  return await http.post('./cashbooks', body);\n}\n\nexport async function deleteCashbook(id) {\n  return await http.deleteById('./cashbooks', id);\n}\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport TableBuilder from '../uis/TableBuilder/TableBuilder';\nimport { getCashbookTableHeaders } from '../../utilities/helpers/tableHelpers.js';\nimport { getCashbookList, getFilteredCashbooks } from '../../http/cashbookApi';\nimport Grid from '@material-ui/core/Grid';\nimport useStyles from '../../styles/useStyles';\nimport { fetchApi } from '../../store/actions/globalAction.js';\nimport DatePicker from './../uis/FormComponents/DatePicker';\nimport PageTitle from '../uis/UtilComponents/PageTitle/PageTitle';\nimport { getJSONDate, getLocalDate } from '../../utilities/helpers/dateHelpers';\nimport { toast } from 'react-toastify';\n\nconst Cashbooks = ({ fetchApi }) => {\n  const classes = useStyles();\n  const [cashbookList, setCashbookList] = useState([]);\n  const [selectedDateTo, setSelectedDateTo] = useState(new Date());\n  const [selectedDateFrom, setSelectedDateFrom] = useState(\n    new Date('2020-05-10T21:11:54')\n  );\n\n  useEffect(() => {\n    const handleGetCashbookResp = res => {\n      handleGetCashbookSuccues(fetchApi, res, setCashbookList);\n    };\n    const handleGetCashbookErr = err => {\n      toast.error('Unable to get Cashbooks');\n    };\n\n    fetchApi(true);\n    getCashbookList()\n      .then(handleGetCashbookResp)\n      .catch(handleGetCashbookErr);\n  }, [fetchApi]);\n\n  const handleEdit = () => {\n    const editClick = () => {};\n    return editClick;\n  };\n\n  const handleGetFilteredCashbook = (startDate, endDate) => {\n    const handleSuccuess = res => {\n      handleGetCashbookSuccues(fetchApi, res, setCashbookList);\n    };\n    const handleError = () => {};\n    getFilteredCashbooks(\n      getLocalDate(getJSONDate(startDate)),\n      getLocalDate(getJSONDate(endDate))\n    )\n      .then(handleSuccuess)\n      .catch(handleError);\n  };\n\n  const handleDateChangeFrom = startDate => {\n    setSelectedDateFrom(startDate);\n    handleGetFilteredCashbook(startDate, selectedDateTo);\n  };\n\n  const handleDateChangeTo = endDate => {\n    setSelectedDateTo(endDate);\n    handleGetFilteredCashbook(selectedDateFrom, endDate);\n  };\n\n  const dateComponent = (\n    <div className={classes.cashbookUi}>\n      <Grid item spacing={5}>\n        <p className={classes.cashbookDateAlign}>From :</p>\n        <DatePicker\n          entry={{\n            id: 'id',\n            name: 'dateChangeTo',\n            label: 'To:',\n            value: selectedDateFrom,\n          }}\n          handleDatePickerChange={handleDateChangeFrom}\n          selectedDate={selectedDateFrom}\n        />\n        <p className={classes.cashbookDateAlign}>To :</p>\n        <DatePicker\n          entry={{\n            id: 'id',\n            name: 'dateChangeTo',\n            label: 'To:',\n            value: selectedDateTo,\n          }}\n          handleDatePickerChange={handleDateChangeTo}\n          selectedDate={selectedDateTo}\n        />\n      </Grid>\n    </div>\n  );\n\n  return (\n    <div className={classes.pageContainer}>\n      <PageTitle title=\"Cashbooks\" createNewPath=\"cashbooks\" />\n      {dateComponent}\n      <TableBuilder\n        tableData={cashbookList}\n        tableHeaders={getCashbookTableHeaders}\n        handleEdit={handleEdit}\n        hideEditIcon\n        densed\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ global }) => {\n  return { ...global };\n};\n\nconst mapActionToProps = {\n  fetchApi,\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(Cashbooks);\nfunction handleGetCashbookSuccues(fetchApi, res, setCashbookList) {\n  fetchApi(false);\n  if (Array.isArray(res.data)) {\n    const displayCashbookList = res.data.map(\n      ({ id, date, refNo, type, amount, description }) => {\n        return {\n          id,\n          date: getLocalDate(date),\n          refNo,\n          type,\n          amount,\n          description,\n        };\n      }\n    );\n    setCashbookList(displayCashbookList);\n  }\n}\n"],"sourceRoot":""}